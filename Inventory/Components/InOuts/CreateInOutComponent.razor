@using Entities
@using Business

<div class="form-group">
    <select class="form-control" @onchange="OnChangedWarehouse">
        <option value="">Seleccione una bodega...</option>
        @foreach (WarehouseEntity warehouse in warehouses)
        {
            <option value="@warehouse.WarehouseID">@warehouse.WarehouseName</option>
        }
    </select>
</div>

<hr />
<EditForm Model="oInOut">
    <div class="form-group">
        <InputSelect @bind-Value="oInOut.StorageID" class="form-control">
            <option value="">Seleccione una bodega...</option>
            @foreach (StorageEntity storage in storages)
            {
                <option value="@storage.StorageID">@storage.Product.ProductName</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label>Escriba la cantidad</label>
        <InputNumber class="form-control" @bind-Value="@oInOut.Quantity" />
    </div>
    <div class="form-group">
        <label>¿Es una entrada?</label>
        <InputCheckbox class="form-control" @bind-Value="@oInOut.IsInput" />
    </div>

    <input type="button" value="@buttonValue" class="form-control" @onclick="SaveInOut" />
</EditForm>

<h4 class="text-center">@message</h4>

@code {
    InputOutputEntity oInOut = new InputOutputEntity();
    List<WarehouseEntity> warehouses = new List<WarehouseEntity>();
    List<StorageEntity> storages = new List<StorageEntity>();

    ProductEntity oProduct = new ProductEntity();
    StorageEntity oStorage = new StorageEntity();

    string buttonValue => oInOut.IsInput
                        ? "Registrar entrada"
                        : "Registrar salida";

    string message;

    protected override async Task OnInitializedAsync()
    {
        warehouses = B_Warehouse.WarehouseList();
    }

    private void OnChangedWarehouse(ChangeEventArgs e)
    {
        string warehouseID = e.Value.ToString();

        storages = B_Storage.StorageProductsByWarehouse(warehouseID);
    }

    private void SaveInOut()
    {
        oStorage = storages.FirstOrDefault(s => s.StorageID == oInOut.StorageID);
        oProduct = oStorage.Product;

        if (oInOut.IsInput)
        {
            oStorage.PartialQuantity = oStorage.PartialQuantity + oInOut.Quantity;
            B_Storage.UpdateStorage(oStorage);

            oProduct.TotalQuantity = oProduct.TotalQuantity + oInOut.Quantity;
            B_Product.UpdateProduct(oProduct);

            message = $"Se ha registrado una entrada del producto {oProduct.ProductName}";
        }
        else
        {
            if (oInOut.Quantity < oStorage.PartialQuantity)
            {
                oStorage.PartialQuantity = oStorage.PartialQuantity - oInOut.Quantity;
                B_Storage.UpdateStorage(oStorage);

                oProduct.TotalQuantity = oProduct.TotalQuantity - oInOut.Quantity;
                B_Product.UpdateProduct(oProduct);

                message = $"Se ha registrado una salida del producto {oProduct.ProductName}";
            }
            else
            {
                message = "Cantidad insuficiente para realizar operación.";
            }
        }
    }
}
